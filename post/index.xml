<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on AtomicReference</title>
    <link>https://atomicreference.github.io/post/</link>
    <description>Recent content in Posts on AtomicReference</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Oct 2018 12:14:02 +0000</lastBuildDate>
    
	<atom:link href="https://atomicreference.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writing Better Tests In Java</title>
      <link>https://atomicreference.github.io/post/writing-better-tests-in-java/</link>
      <pubDate>Tue, 30 Oct 2018 12:14:02 +0000</pubDate>
      
      <guid>https://atomicreference.github.io/post/writing-better-tests-in-java/</guid>
      <description>Ever wondered why your tests break everytime you change production code? Are your tests difficult to read? This usually happens due to tests being too attached to the corresponding implementation. I will show a few techniques on how to writte better tests in Java.
PS.: I will call &amp;laquo;Production Code&amp;raquo;, the code that you write to make your tests pass.
Issue #1: Changing Production Code Breaks Many Tests When your tests are too specific and bound to its implementation, you will notice that any changes to the production code such as extracting a method, extracting a class, and others, breaks your unit tests.</description>
    </item>
    
    <item>
      <title>Hello World!</title>
      <link>https://atomicreference.github.io/post/my-first-post/</link>
      <pubDate>Thu, 18 Oct 2018 15:21:02 +0000</pubDate>
      
      <guid>https://atomicreference.github.io/post/my-first-post/</guid>
      <description>Hello world! Here is my first post.
I shall begin it explaining how I setup this blog using GitHub Pages, GitLab and Hugo.
Creating a new GitHub Pages To setup a new GitHub page, the website tutorial is pretty straightforward, so I will skip this.
Hugo Hugo is a static website generator built on Go. It is extremely fast and requires little setup to start using it.
To install it is as simple as:</description>
    </item>
    
  </channel>
</rss>